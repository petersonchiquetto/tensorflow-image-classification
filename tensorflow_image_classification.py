# -*- coding: utf-8 -*-
"""tensorflow-image-classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bE2aEM2S3qmoZn9C5X5Vw0pYr7dGWbN9
"""

import cv2
import numpy as np
import tensorflow as tf
import requests
from io import BytesIO
from PIL import Image

print("TensorFlow version:", tf.__version__)

# Lista de links para cada classe
urls_class_1 = [
    "https://purina.com.br/sites/default/files/2024-08/racas-cachorros-porte-medio-beagle-br.jpg",
    "https://adimax.com.br/wp-content/uploads/2022/05/cuidados-filhote-de-cachorro.jpg",
    "https://einvestidor.estadao.com.br/wp-content/uploads/2025/02/copia-de-webstories-modelo-3_240220250919.png.webp",
    "https://www.cnnbrasil.com.br/wp-content/uploads/sites/12/2024/02/cachorro-messi-anatomia-de-uma-queda-e1708119960460.jpg",
    "https://static.revistahaus.com.br/revistahaus/2017/08/18112026/casainha-cachorro-aquecida-bigstock.jpg",
    "https://www.portaldodog.com.br/wp-content/uploads/2025/03/Nova-raca-de-cachorro.jpg"
]

urls_class_2 = [
    "https://s3.static.brasilescola.uol.com.br/be/2022/01/tigre.jpg",
    "https://www.infoescola.com/wp-content/uploads/2010/06/tigre-de-bengala-60322900.jpg",
    "https://www.worldanimalprotection.org.br/cdn-cgi/image/width=800,format=auto,fit=cover/siteassets/article/1008357-flip.jpg",
    "https://media.istockphoto.com/id/1420676204/pt/foto/portrait-of-a-royal-bengal-tiger-alert-and-staring-at-the-camera-national-animal-of-bangladesh.jpg?s=612x612&w=0&k=20&c=ykuy9gJsM_6-kxuiBwGdur8j5fn_XhM-CkH485l-siA=",
    "https://static.poder360.com.br/2020/04/tigre-olhando-com-a-boca-aberta.jpg",
    "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQjXLHMid4FzYlVqGOfnYaJavImaonK0ubedg&s","https://img.freepik.com/fotos-premium/fechar-o-retrato-do-tigre-siberiano-amur_273651-1.jpg?semt=ais_hybrid&w=740"
]

# URLs para a nova classe "sorvete"
urls_class_3 = [
    "https://s2-g1.glbimg.com/P9Js-ERqWnZp3mcL7tHyM6N5SWw=/0x0:1080x1079/984x0/smart/filters:strip_icc()/i.s3.glbimg.com/v1/AUTH_59edd422c0c84a879bd37670ae4f538a/internal_photos/bs/2023/6/N/YAqwDaSFCWLxVjTZb9mg/snapinsta.app-366201212-318238204095430-6350978613078668919-n-1080.jpg",
    "https://p2.trrsf.com/image/fget/cf/774/0/images.terra.com/2024/09/23/three-ice-cream-cones-sit-table-with-one-that-says-ice-cream-rhdac4q0yed4.jpg",
    "https://http2.mlstatic.com/D_NQ_NP_838827-MLB44027021007_112020-O.webp",
    "https://f.i.uol.com.br/fotografia/2018/01/18/15163126835a61186beddfd_1516312683_3x2_md.jpg",
    "https://www.alimentosindustrializados.com.br/wp-content/uploads/2023/04/sorvete-scaled.jpg"
]

# Parâmetros fixos de imagem
IMG_WIDTH = 160
IMG_HEIGHT = 120

def load_image_from_url(url):
    try:
        response = requests.get(url)
        image = Image.open(BytesIO(response.content)).convert("RGB")  # RGB ao invés de "L" (grayscale)
        image = image.resize((IMG_WIDTH, IMG_HEIGHT))
        image = np.array(image) / 255.0  # Normaliza para 0-1
        return image  # Retorna a imagem sem expandir as dimensões
    except Exception as e:
        print(f"Erro ao carregar imagem: {url}")
        print(e)
        return None

# Preparando dados
images = []
y = []

# Carregar imagens para a classe 1 (cachorro)
for url in urls_class_1:
    img = load_image_from_url(url)
    if img is not None:
        images.append(img)
        y.append(np.array([1.0, 0.0, 0.0]))  # Classe cachorro

# Carregar imagens para a classe 2 (tigre)
for url in urls_class_2:
    img = load_image_from_url(url)
    if img is not None:
        images.append(img)
        y.append(np.array([0.0, 1.0, 0.0]))  # Classe tigre

# Carregar imagens para a nova classe 3 (sorvete)
for url in urls_class_3:
    img = load_image_from_url(url)
    if img is not None:
        images.append(img)
        y.append(np.array([0.0, 0.0, 1.0]))  # Classe sorvete

print(f"Total de imagens carregadas: {len(images)}")

# Modelo
model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(IMG_HEIGHT, IMG_WIDTH, 3)),  # A entrada agora é 3 canais (RGB)
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation="relu", name="dense_1"),  # Camada densa com 64 neurônios
    tf.keras.layers.Dense(32, activation="relu", name="dense_2"),  # Camada densa com 32 neurônios
    tf.keras.layers.Dense(3, activation="softmax", name="output")  # Agora tem 3 classes
])

# Compilando o modelo com a função de perda correta para classificação
model.compile(optimizer='adam',
              loss='categorical_crossentropy',  # Função de perda adequada para classificação
              metrics=['accuracy'])

# Treinamento do modelo
EPOCHS = 100
model.fit(np.array(images), np.array(y), epochs=EPOCHS)

# Teste com uma imagem nova (por exemplo, sorvete)
test_url = "https://img.freepik.com/fotos-premium/fechar-o-retrato-do-tigre-siberiano-amur_273651-1.jpg?semt=ais_hybrid&w=740"  # URL de imagem de sorvete
test_img = load_image_from_url(test_url)
if test_img is not None:
    test_img = np.expand_dims(test_img, axis=0)  # Adiciona a dimensão do batch (1, H, W, 3)
    predict = model.predict(test_img)
    predict_label = np.argmax(predict[0])  # Obtém o índice da classe com maior probabilidade
    labels = ["cachorro", "tigre", "sorvete"]  # Agora com 3 classes
    print("Predicted Label:", labels[predict_label])
    print("Raw Prediction:", predict)
else:
    print("Erro ao carregar a imagem de teste.")